
// Navigation bar javascript code below along with short explanation
const navToggle = document.querySelector(".nav-toggle");
const links = document.querySelector(".links");

navToggle.addEventListener("click", function () {
  links.classList.toggle("show-links");
});

function toggleDropdown(dropdownId) {
  // Get the dropdown element by its ID
  var dropdown = document.getElementById(dropdownId);

  // Check the current display style of the dropdown
  if (dropdown.style.display === 'block') {
    // If it's currently set to 'block', change it to 'none'
    dropdown.style.display = 'none';
  } else {
    // Otherwise else, change it to 'block'
    dropdown.style.display = 'block';
  }
}

/*

Explanation of javascript navigation code:

function toggleDropdown(dropdownId) {: This declares a JavaScrpt function named toggleDropdown that takes one parameter, 
dropdownId.

var dropdown = document.getElementById(dropdownId);: This line uses document.getElementById to get the HTML element with 
the specified ID (dropdownId). I think it assumes that the dropdown element has been assigned an ID.

-The function toggleDropdown takes an argument called dropdownId, representing the ID of the dropdown element.
-Inside the function, there's an if-else statement that checks the current display style of the dropdown.  
-Basically, iif the display style is 'block' (meaning the dropdown is currently visible), it changes the display style to 
'none' to hide it.  
-If the display style is not 'block' (meaning the dropdown is currently hidden or has a different display style), it 
changes the display style to 'block' to make it visible.

*/


// BUTTON 4 REQUIREMENT: Changing color scheme of the webpage to infinite color scheme
function changeColors() {
  var elementsToChange = document.querySelectorAll('nav, body, .dropdown-content'); 
// Query selector working here as an array to change color scheme of different elements

// Use of random function
  elementsToChange.forEach(function(element) {
    // Generate a random color
    var newColor = getRandomColor();
    element.style.backgroundColor = newColor;
  });
}

function getRandomColor() {
  var letters = '0123456789ABCDEF';
  var color = '#';
  for (var i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }
  return color;
}

/*

Explanation of BUTTON 4 javascript code:

1. changeColors Function: This function changes the background color of certain elements on a webpage. 
The elements to be changed are specified using the querySelectorAll method, which selects elements based on their tags 
or classes. 
In this case, it selects all <nav> elements, the entire <body> element, and elements with the class .dropdown-content. 
It then uses a loop (forEach) to go through each selected element and change its background color. The new color is 
randomly generated by calling the getRandomColor function. 

2. getRandomColor Function: This function generates a random hexadecimal color code. It creates a string (color) starting 
with the '#' symbol, followed by six characters randomly selected from the set of numbers (0-9) and letters (A-F). 
The loop runs six times (for each character in the color code), and in each iteration, a random character is added to the
color string. The resulting random color code is then returned.

*/


/* BUTTON 1 + 2 + 3 REQUIRMENT: counter that adds +2 to the counter if the user selections the “Like” button. 
The counter should decrease by -1 if the user selects the “dislike” button. Button 3 should reset the counter. 
If the number is positive, we would like the colour to be white. A negative number should have a colour of red. 
If the number is reset to 0 it should be black.  
*/

function like(postId) {
  var countElement = document.getElementById('count' + postId.slice(-1));
  var count = parseInt(countElement.textContent);
  count += 2;
  countElement.textContent = count;
  updateCountColor(countElement, count);
}

function dislike(postId) {
  var countElement = document.getElementById('count' + postId.slice(-1));
  var count = parseInt(countElement.textContent);
  count -= 1;
  countElement.textContent = count;
  updateCountColor(countElement, count);
}

function reset(postId) {
  var countElement = document.getElementById('count' + postId.slice(-1));
  countElement.textContent = 0;
  countElement.classList.remove('positive', 'negative');
}

function updateCountColor(element, count) {
  if (count > 0) {
    element.classList.remove('negative');
    element.classList.add('positive');
  } else if (count < 0) {
    element.classList.remove('positive');
    element.classList.add('negative');
  } else {
    element.classList.remove('positive', 'negative');
  }
}

/* 

Explaination of BUTTON 1 + 2 + 3 javascript code:

1. like Function: This function is called when a user likes a post on a webpage. It takes a parameter postId, which is 
the identifier of the post being liked. It finds the HTML element with the id 'count' followed by the last character of 
the postId. It extracts the current like count from the text content of that element, converts it to a number, and 
increments it by 2. The updated count is then set as the new text content of the element. The function then calls 
updateCountColor to adjust the color of the count based on its value. 

2. dislike Function: Similar to the like function, but it's triggered when a user dislikes a post. It decreases the 
like count by 1 instead of increasing it. 

3. reset Function: This function is called to reset the like count to 0 for 
a specific post. It finds the HTML element with the id 'count' followed by the last character of the postId. It sets the 
text content of that element to 0. It also removes any styling classes ('positive' and 'negative') that were previously 
applied to the element. 

4. updateCountColor Function: This function adjusts the color of the like count based on its value. It takes two 
parameters: element (the HTML element representing the like count) and count (the numeric value of the like count). 
If the count is greater than 0, it adds the 'positive' class and removes the 'negative' class from the element. 
If the count is less than 0, it adds the 'negative' class and removes the 'positive' class. If the count is exactly 0, 
it removes both 'positive' and 'negative' classes, leaving the styling neutral.

*/

/* BUTTON 5 + 6 REQUIREMENT: buttons to cycle through a list of 4 employee statements. These statements should include 
their picture, their thoughts about air Canada, and their job title. */

const reviews = [
  {
    id: 1,
    name: 'Gepard Miller',
    job: 'Aircraft Maintenance Technician',
    img: 'https://as1.ftcdn.net/v2/jpg/03/38/30/80/1000_F_338308078_iiXC8b9lxpxmjGKaKu4dtXHSIVfzE8qm.jpg',
    text: "I have been working here at Air Canada for almost 2 years as an Aircraft Maintenance Technician, and it has been an incredibly rewarding journey filled with opportunities for professional growth, collaboration with a skilled team, and contributing to the safety and efficiency of our fleet.",
  },
  {
    id: 2,
    name: 'Camila García',
    job: 'Payroll Manager',
    img: 'https://storage.googleapis.com/pai-images/07085dc309a14a50912c8277bcf585ce.jpeg',
    text: "As Air Canada's Payroll Manager, navigating the complexities of payroll operations has been a source of constant fulfillment. For individuals drawn to the intricacies of payroll management and seeking a chance to directly impact a leading aviation company, this opportunity invites active participation in shaping our ongoing commitment to excellence.",
  },
  {
    id: 3,
    name: 'Eric Zhang',
    job: 'Customer Service Agent',
    img: 'https://media.istockphoto.com/id/1288538088/photo/portrait-young-confident-smart-asian-businessman-look-at-camera-and-smile.webp?b=1&s=170667a&w=0&k=20&c=EcjlfC0hE33usx5Ys_ftE1iC0TlgKG1pSqclpOULGLk=',
    text: "As a Customer Service Agent at Air Canada, my role is not just about assisting passengers; it's about creating positive travel experiences, solving challenges with a smile, and being a vital link in connecting people to the world. Each day brings new opportunities to exceed expectations and make a difference in our passengers' journeys, and I find immense satisfaction in being part of a team that prioritizes customer satisfaction and fosters a welcoming travel environment.",
  },
  {
    id: 4,
    name: 'Oliver Johnson',
    job: 'Maintenance Operations Controller',
    img: 'https://www.mcgill.ca/desautels/files/desautels/styles/fullwidth_breakpoints_theme_moriarty_small_1x/public/karl-moore-400x400.jpg?itok=5ZXrHRW9&timestamp=1654789606',
    text: "As a Maintenance Operations Controller at Air Canada, my experience has been nothing short of exhilarating, overseeing the intricate dance of aircraft maintenance schedules and ensuring the seamless coordination of resources. Being an essential part of the team that keeps our fleet operating at its best is not just a job; it's a dynamic, rewarding journey where precision and collaboration come together to uphold the highest standards of safety and operational excellence.",
  },
  {
    id: 5,
    name: 'Reina Sasaki',
    job: 'Pilot',
    img: 'https://storage.googleapis.com/pai-images/f19809af169046b98a56e3ac78987135.jpeg',
    text: "As a pilot at Air Canada, the skies have become my canvas, and each flight is a testament to the incredible journey of command, precision, and passion. Navigating through the clouds, I find fulfillment in the responsibility of ensuring the safety and comfort of our passengers, making every takeoff and landing a celebration of the extraordinary experience that comes with being a part of this renowned airline.",  
  },
];

// select items
const img = document.getElementById('person-img');
const author = document.getElementById('author');
const job = document.getElementById('job');
const info = document.getElementById('info');
const stat = document.getElementById('stat');

const prevBtn = document.querySelector('.prev-btn');
const nextBtn = document.querySelector('.next-btn');
const randomBtn = document.querySelector('.random-btn');

// set starting item
let currentItem = 0;

// load initial item
window.addEventListener('DOMContentLoaded', function () {
  const item = reviews[currentItem];
  img.src = item.img;
  author.textContent = item.name;
  job.textContent = item.job;
  info.textContent = item.text;
});

// show person based on item
function showPerson(person) {
  const item = reviews[person];
  img.src = item.img;
  author.textContent = item.name;
  job.textContent = item.job;
  info.textContent = item.text;
}
// show next person
nextBtn.addEventListener('click', function () {
  currentItem++;
  if (currentItem > reviews.length - 1) {
    currentItem = 0;
  }
  showPerson(currentItem);
});
// show prev person
prevBtn.addEventListener('click', function () {
  currentItem--;
  if (currentItem < 0) {
    currentItem = reviews.length - 1;
  }
  showPerson(currentItem);
});
// show random person
randomBtn.addEventListener('click', function () {
  console.log('hello');

  currentItem = Math.floor(Math.random() * reviews.length);
  showPerson(currentItem);
});

// queries to be added in order to make the code work below for their respective buttons...
const firstBtn = document.querySelector('.first');
const lastBtn = document.querySelector('.last');

// A button that goes to the start of the review section (the very first person).
firstBtn.addEventListener('click', function () {
  currentItem = 0;
  showPerson(currentItem);
});

// A button that goes to the end of the review section (the very last person).
lastBtn.addEventListener('click', function () {
  currentItem = reviews.length - 1;
  showPerson(currentItem);
});

/*

Explaination of BUTTON 5 + 6 javascript code:

1. Data Structure (reviews array): The code defines an array called reviews containing objects. Each object 
represents a person's review with properties like id, name, job, img (image URL), and text (review content). 

2. HTML Element Selection: The code selects various HTML elements by their IDs or classes using document.getElementById 
and document.querySelector. 

3. Initial Setup: It sets up variables (img, author, job, info, stat) to store references to HTML elements where 
information will be displayed. It also sets up buttons (prevBtn, nextBtn, randomBtn, firstBtn, lastBtn) for navigation. 

4. Initial Display: When the webpage loads, the DOMContentLoaded event triggers, and the first review's information is 
displayed in the designated HTML elements. 

5. showPerson Function: This function takes an index (person) as an argument and displays the corresponding person's 
information in the HTML elements. 

6. Navigation Buttons (prevBtn, nextBtn, randomBtn, firstBtn, lastBtn): Clicking the "Next" button (nextBtn) displays 
the information of the next person in the reviews array. Clicking the "Previous" button (prevBtn) displays the information
of the previous person. Clicking the "Random" button (randomBtn) displays the information of a randomly chosen person. 
Clicking the "First" button (firstBtn) displays the information of the first person in the list. 
Clicking the "Last" button (lastBtn) displays the information of the last person in the list.

*/

/* BUTTON / MODIFICATION 7 REQUIRMENT: something special and unique. I chose not to do a button because there were already too many 
buttons, instead, I clarified this Mr. Rai if it was okay not to create a button. In the code below, I created 
an esitmated net worth salary each time the number of years of experience increases. */

let currentSalary = 50000;
let experience = 1;

setInterval(() => {
    if (experience === 40) {
        // Reset to initial values after 40 years of experience
        currentSalary = 50000;
        experience = 1;
    } else {
        currentSalary += 2000; // Increase by $2,000 every year
        experience += 1;
    }

    document.getElementById('currentSalary').innerText = currentSalary.toLocaleString();
    document.getElementById('experience').getElementsByTagName('span')[0].innerText = experience;
}, 1000); // Updatee every 1 second

/* 

Explaination of MODIFICATION 7 REQUIRMENT javascript code:

1. Initial Values: There are two variables, currentSalary and experience, representing the current salary and years of 
work experience, respectively. currentSalary is initially set to $50,000, and experience is set to 1. 

2. setInterval Function: The setInterval function is used to repeatedly execute a block of code at regular intervals. 
In this case, the code inside the setInterval block runs every 1000 milliseconds (1 second). 

3. Annual Salary Update: Inside the setInterval block, there's an if-else statement. If the experience reaches 40 years, 
the code resets the currentSalary and experience to their initial values ($50,000 and 1, respectively). If the experience 
is less than 40, the code increases the currentSalary by $2,000 and increments the experience by 1 for each iteration. 

4. Updating HTML Elements: After updating the salary and experience values, the code updates the content of HTML elements 
with specific IDs: The element with the ID 'currentSalary' displays the updated salary using innerText. The element with 
the ID 'experience' contains a span element whose content is updated with the current experience value.

*/